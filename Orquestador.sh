#!/bin/bash # ===================================================== # Orquestador de escaneo y reporte de servicios # ===================================================== # --- Colores --- RESET="\e[0m"; GREEN="\e[32m"; RED="\e[31m"; YELLOW="\e[33m" BLUE="\e[34m"; CYAN="\e[36m"; MAGENTA="\e[35m"; BOLD="\e[1m"; GRAY="\e[90m" # --- Verificación de dependencias --- check_dep() { command -v "$1" >/dev/null 2>&1 || { echo -e "${RED}$1 no instalado.${RESET}" read -p "¿Deseas instalarlo ahora? (y/n): " opt if [[ "$opt" =~ ^[Yy]$ ]]; then sudo apt update && sudo apt install -y "$1" else echo -e "${YELLOW}Saltando instalación de $1...${RESET}" fi } } check_dep nmap check_dep xmlstarlet check_dep jq check_dep searchsploit check_dep curl # --- Spinner (animación de carga) --- spinner() { local pid=$1 local msg=$2 local spin='|/-\\' local i=0 echo -ne "${CYAN}${msg}${RESET} " while kill -0 $pid 2>/dev/null; do i=$(( (i+1) %4 )) printf "\b${spin:$i:1}" sleep 0.1 done printf "\b\n" } # --- Escaneo con Nmap --- escanear_nmap() { local TARGET=$1 OUT_DIR=$2 echo -e "\n${BLUE} NMAP – Escaneo completo${RESET}" mkdir -p "$OUT_DIR" local NMAP_XML="$OUT_DIR/nmap_${TARGET}.xml" local NMAP_OUTPUT="$OUT_DIR/nmap_${TARGET}.txt" (nmap -p- -sV -A -oX "$NMAP_XML" -oN "$NMAP_OUTPUT" "$TARGET" >/dev/null 2>&1) & spinner $! "Escaneando con Nmap..." echo -e "${GREEN}✔ Escaneo completado.${RESET}" local SERVICES_CSV="$OUT_DIR/services_parsed.csv" xmlstarlet sel -t -m "//host/ports/port[state/@state='open']" \ -v "concat(ancestor::host/address/@addr,'|',@portid,'|',service/@name,'|',service/@product,'|',service/@version,'|',service/@extrainfo)" -n \ "$NMAP_XML" | sed 's/||/-/g' > "$SERVICES_CSV" } # --- Buscar exploits en Exploit-DB --- buscar_exploits() { local TARGET=$1 OUT_DIR=$2 echo -e "\n${BLUE} SEARCHSPLOIT – Coincidencias${RESET}" local NMAP_XML="$OUT_DIR/nmap_${TARGET}.xml" local SEARCHSPLOIT_OUTPUT="$OUT_DIR/searchsploit_matches_${TARGET}.txt" (searchsploit --nmap "$NMAP_XML" > "$SEARCHSPLOIT_OUTPUT" 2>/dev/null) & spinner $! "Buscando exploits..." echo -e "${GREEN}✔ Coincidencias registradas.${RESET}" } # --- Consultar información en Shodan --- consultar_shodan() { local TARGET=$1 OUT_DIR=$2 echo -e "\n${BLUE} SHODAN – Información adicional${RESET}" local SHODAN_JSON="$OUT_DIR/shodan_${TARGET}.json" # Usa variable de entorno (más seguro) if [[ -z "$SHODAN_API_KEY" ]]; then echo -e "${YELLOW}⚠ No se detectó la variable SHODAN_API_KEY.${RESET}" echo "Por favor, exporta tu clave antes de ejecutar:" echo " export SHODAN_API_KEY=\"tu_clave_aqui\"" return fi (curl -s "https://api.shodan.io/shodan/host/$TARGET?key=$SHODAN_API_KEY" -o "$SHODAN_JSON") & spinner $! "Consultando Shodan API..." echo -e "${GREEN}✔ Información guardada.${RESET}" } # --- Generar datos para Chart.js --- generar_datos_chartjs() { local SERVICES_CSV=$1 local LABELS_JS="[]" local DATA_JS="[]" if [[ -s "$SERVICES_CSV" ]]; then local tmp="$(mktemp)" cut -d'|' -f3 "$SERVICES_CSV" | sed '/^\s*$/d' | sort | uniq -c | \ awk '{cnt=$1; $1=""; sub(/^ +/,""); printf "%s|%s\n",$0,cnt}' > "$tmp" local labels=""; local data="" while IFS='|' read -r svc cnt; do svc_esc=$(echo "$svc" | sed 's/"/\\"/g') labels+=\"${svc_esc}\", data+=${cnt}, done < "$tmp" LABELS_JS="[${labels%,}]" DATA_JS="[${data%,}]" rm -f "$tmp" fi echo "$LABELS_JS|$DATA_JS" } # --- Mostrar resumen en terminal --- mostrar_resumen_terminal() { local TARGET=$1 OUT_DIR=$2 local SERVICES_CSV="$OUT_DIR/services_parsed.csv" local SEARCHSPLOIT_OUTPUT="$OUT_DIR/searchsploit_matches_${TARGET}.txt" local SHODAN_JSON="$OUT_DIR/shodan_${TARGET}.json" echo -e "\n${MAGENTA} REPORTE CONSOLIDADO – ${TARGET}${RESET}\n" if [[ -s "$SERVICES_CSV" ]]; then printf "%-15s %-8s %-18s %-25s %-15s %-20s\n" "IP" "PUERTO" "SERVICIO" "PRODUCTO" "VERSIÓN" "EXTRA" echo "──────────────────────────────────────────────────────────────────────────────" while IFS="|" read -r ip port service product version extra; do printf "%-15s %-8s %-18s %-25s %-15s %-20s\n" "$ip" "$port" "$service" "$product" "$version" "$extra" done < "$SERVICES_CSV" else echo -e "${GRAY}No se detectaron servicios.${RESET}" fi echo -e "\n${BLUE}Exploit-DB:${RESET}" [[ -s "$SEARCHSPLOIT_OUTPUT" ]] && cat "$SEARCHSPLOIT_OUTPUT" || echo -e "${GRAY}No se encontraron coincidencias.${RESET}" echo -e "\n${BLUE}Shodan:${RESET}" [[ -s "$SHODAN_JSON" ]] && jq -r '. | {ip_str, country_name, isp, org}' "$SHODAN_JSON" || echo -e "${GRAY}Sin datos de Shodan.${RESET}" } # --- Generar reporte HTML --- generar_html() { local TARGET=$1 OUT_DIR=$2 local SERVICES_CSV="$OUT_DIR/services_parsed.csv" local HTML_FILE="$OUT_DIR/reporte_${TARGET}.html" local chartdata chartdata=$(generar_datos_chartjs "$SERVICES_CSV") local LABELS_JS=$(echo "$chartdata" | cut -d'|' -f1) local DATA_JS=$(echo "$chartdata" | cut -d'|' -f2) cat > "$HTML_FILE" <<EOF <!DOCTYPE html> <html lang="es"> <head> <meta charset="UTF-8"> <title>Reporte $TARGET</title> <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> </head> <body> <h1>Reporte de escaneo — $TARGET</h1> <canvas id="chart" width="400" height="200"></canvas> <script> const labels = $LABELS_JS; const data = $DATA_JS; new Chart(document.getElementById('chart'), { type: 'bar', data: { labels: labels, datasets: [{ label: 'Servicios', data: data, backgroundColor: 'rgba(0,212,255,0.7)' }] }, options: { responsive: true, scales: { y: { beginAtZero: true } } } }); </script> </body> </html> EOF echo -e "${GREEN}Reporte HTML generado en:${RESET} ${HTML_FILE}" } # --- Script principal --- read -p "Introduce IP o hostname: " TARGET read -p "Directorio de salida (default './orquestador_output'): " OUT_DIR OUT_DIR=${OUT_DIR:-./orquestador_output} mkdir -p "$OUT_DIR" echo -e "\nOpciones: 1=Nmap, 2=ExploitDB, 3=Shodan, 4=Todo" read -p "Opción: " OPCION case "$OPCION" in 1) escanear_nmap "$TARGET" "$OUT_DIR" ;; 2) buscar_exploits "$TARGET" "$OUT_DIR" ;; 3) consultar_shodan "$TARGET" "$OUT_DIR" ;; 4) escanear_nmap "$TARGET" "$OUT_DIR"; buscar_exploits "$TARGET" "$OUT_DIR"; consultar_shodan "$TARGET" "$OUT_DIR" ;; *) echo "Opción inválida." && exit 1 ;; esac generar_html "$TARGET" "$OUT_DIR" mostrar_resumen_terminal "$TARGET" "$OUT_DIR"